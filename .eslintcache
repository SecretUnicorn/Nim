[{"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\index.js":"1","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\reportWebVitals.js":"2","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\App.js":"3","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\DarkModeSwitch.jsx":"4","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\Settings.js":"5","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\Game.jsx":"6","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\store.js":"7","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\index.js":"8","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\SettingsReducer.js":"9","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\constants\\settingsContants.js":"10","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\actions\\index.js":"11","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\actions\\gameActions.js":"12","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\GamingReducer.js":"13","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\constants\\gamingConstans.js":"14","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\services\\GameLogic.js":"15","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\GameOverScreen.jsx":"16"},{"size":648,"mtime":1607878973378,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1667,"mtime":1607881451667,"results":"20","hashOfConfig":"18"},{"size":3877,"mtime":1607881305355,"results":"21","hashOfConfig":"18"},{"size":7184,"mtime":1607881467953,"results":"22","hashOfConfig":"18"},{"size":7256,"mtime":1607881628984,"results":"23","hashOfConfig":"18"},{"size":588,"mtime":1607822102887,"results":"24","hashOfConfig":"18"},{"size":265,"mtime":1607827771789,"results":"25","hashOfConfig":"18"},{"size":1044,"mtime":1607880238486,"results":"26","hashOfConfig":"18"},{"size":184,"mtime":1607826256678,"results":"27","hashOfConfig":"18"},{"size":32,"mtime":1607822703775,"results":"28","hashOfConfig":"18"},{"size":2730,"mtime":1607880839872,"results":"29","hashOfConfig":"18"},{"size":1592,"mtime":1607880057667,"results":"30","hashOfConfig":"18"},{"size":194,"mtime":1607879914830,"results":"31","hashOfConfig":"18"},{"size":5731,"mtime":1607880518390,"results":"32","hashOfConfig":"18"},{"size":1817,"mtime":1607879357684,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1mhkb8j",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\index.js",[],["73","74"],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\reportWebVitals.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\App.js",["75","76","77","78","79","80"],"import React, { useEffect, useState } from \"react\"\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\nimport { Box, createMuiTheme, CssBaseline, Fab, makeStyles, SvgIcon, ThemeProvider, useTheme, Zoom } from \"@material-ui/core\";\nimport Cookies from \"js-cookie\"\nimport DarkModeSwitch from \"DarkModeSwitch\";\nimport Game from \"components/Game\";\nimport Settings from \"components/Settings\";\n\n\nfunction App() {\n\n  const [useDarktheme, setDarkTheme] = useState(true)\n\n  const toggleDarkTheme = () => {\n    const newValue = !useDarktheme\n    setDarkTheme(newValue)\n    let cookies = Cookies.get(\"norbert-settings\")\n    cookies = cookies ? JSON.parse(cookies) : {}\n    cookies.prefereDarkmode = newValue\n    Cookies.set(\"norbert-settings\", JSON.stringify(cookies))\n  }\n\n  const MainTheme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          mode: useDarktheme ? 'dark' : 'light',\n        },\n      }),\n    [useDarktheme],\n  );\n\n  useEffect(() => {\n    try{\n      var settings = JSON.parse(Cookies.get(\"norbert-settings\"))\n    } catch {\n      settings = {prefereDarkmode: true}\n    }\n    setDarkTheme(settings.prefereDarkmode)\n  }, [])\n\n  return (\n    <div className=\"App\" style={{minHeight: '100vh', minWidth: '100vw'}}>\n    \n    <ThemeProvider theme={MainTheme}>\n      <CssBaseline/>\n\n      <Router basename=\"norbert\">\n        <Route exact path=\"/\">\n          <Game/>\n        </Route>\n        <Route exact path=\"/settings\">\n          <Settings/>\n        </Route>\n        <DarkModeSwitch onClick={() => toggleDarkTheme()}/>\n      </Router>\n\n          \n    </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\DarkModeSwitch.jsx",["81","82"],"import { faCog, faGamepad, faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Fab, Grid, makeStyles, SvgIcon } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grow, Typography } from \"@material-ui/core\"\r\nimport { NavLink, Route, useLocation } from 'react-router-dom';\r\nimport {\r\n    Switch,\r\n} from \"react-router-dom\";\r\n\r\nimport { ReactComponent as DarkLightLogo } from \"static/images/darklighticon.svg\"\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((t) => ({\r\n    wrapper: {\r\n        position: 'absolute',\r\n        top: t.spacing(2),\r\n        right: t.spacing(2),\r\n    },\r\n    themeToggle: {\r\n        color: t.palette.background.default,\r\n        backgroundColor: t.palette.text.primary,\r\n        '&:hover': {\r\n            backgroundColor: t.palette.background.paper,\r\n            color: t.palette.text.primary,\r\n        }\r\n    },\r\n    \r\n    dialogRoot: {\r\n        textAlign: 'center'\r\n    }\r\n}));\r\n\r\n\r\nexport default function DarkModeSwitch(props) {\r\n\r\n    const { onClick } = props\r\n    const location = useLocation();\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container direction=\"column\" spacing={1} justifyContent=\"flex-end\" alignItems=\"flex-end\" className={classes.wrapper}>\r\n            <Dialog\r\n            classes={{root:classes.root, scrollPaper: classes.scrollPaper }}\r\n            open={open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">\r\n                How to Play\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                Welcome Agent, <br/><br/>\r\n                your mission is to kill the enemy agents without killing <b>Norbert</b>!\r\n                Each round you <u>have to</u> choose Agents left or right from <b>Norbert</b>.\r\n                The Person that has to choose Norbert looses.<br/><br/>\r\n                Good Luck!\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => setOpen(false)} color=\"secondary\">Dismiss</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n            <Grid item>\r\n                <NavLink to={location.pathname.indexOf(\"settings\") > -1 ? '/' : '/settings'}>\r\n                    <Fab className={classes.themeToggle}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <FontAwesomeIcon size=\"2x\" icon={faCog}/>\r\n                            </Route>\r\n                            <Route exact path=\"/settings\">\r\n                                <FontAwesomeIcon size=\"2x\" icon={faGamepad}/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </Fab>\r\n                </NavLink>\r\n            </Grid>\r\n            <Grid item>\r\n                <Fab className={classes.themeToggle} onClick={onClick}>\r\n                    <SvgIcon>\r\n                        <DarkLightLogo />\r\n                    </SvgIcon>\r\n                </Fab>\r\n            </Grid>\r\n            <Grid item>\r\n                <Fab className={classes.themeToggle} onClick={() => setOpen(true)}>\r\n                    <SvgIcon>\r\n                        <FontAwesomeIcon size=\"2x\" icon={faQuestion}/>\r\n                    </SvgIcon>\r\n                </Fab>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\Settings.js",["83","84"],"import { Container, Grid, Input, Slider, ToggleButton, ToggleButtonGroup, Typography } from '@material-ui/core'\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeSettings } from \"redux/actions\"\r\nimport { START_OPTIONS } from 'redux/constants/settingsContants'\r\n\r\n\r\nconst Settings = (props) => {\r\n\r\n    const { hardMode, totalMinionAmount, startOption, setSettings, maxTake } = props\r\n\r\n    const handleSliderChange = (newValue, name) => {\r\n        setSettings(name, newValue);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setSettings(\"totalMinionAmount\", event.target.value === '' ? 11 : Number(event.target.value));\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (totalMinionAmount < 3) {\r\n            setSettings(\"totalMinionAmount\", 3);\r\n        } else if (totalMinionAmount > 30) {\r\n            setSettings(\"totalMinionAmount\", 30);\r\n        }\r\n    };\r\n\r\n\r\n    /* const handleBlur = () => {\r\n        if (value < 0) {\r\n            setSettings(\"totalMinionAmount\", value);\r\n        } else if (value > 100) {\r\n          setValue(100);\r\n        }\r\n      }; */\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container justifyContent=\"center\" style={{ minHeight: '100vh', overflow: 'hidden' }}>\r\n                <Grid item container direction=\"column\" spacing={2}>\r\n                    <Grid item style={{ marginBottom: '2em' }}>\r\n                        <Typography variant=\"h1\">\r\n                            Settings\r\n                </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle1\">Difficulty</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <ToggleButtonGroup name=\"hardMode\" exclusive value={hardMode} onChange={(e, val) => setSettings(\"hardMode\", val)}>\r\n                            <ToggleButton name=\"hardMode\" value={true}>\r\n                                AI\r\n                    </ToggleButton>\r\n                            <ToggleButton name=\"hardMode\" value={false}>\r\n                                Random\r\n                    </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle1\">Start Player</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <ToggleButtonGroup name=\"startOption\" exclusive value={startOption} onChange={(e, val) => setSettings(\"startOption\", val)}>\r\n                            {Object.entries(START_OPTIONS).map(([key, value]) =>\r\n                                <ToggleButton key={key} value={value}>\r\n                                    {value}\r\n                                </ToggleButton>\r\n                            )}\r\n                        </ToggleButtonGroup>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle1\">Total Minion Amount</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                            <Grid item xs={6}>\r\n                                <Slider\r\n                                    value={typeof totalMinionAmount === \"number\" ? totalMinionAmount : 11}\r\n                                    onChange={(event, newValue) => handleSliderChange(newValue, \"totalMinionAmount\")}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    min={3}\r\n                                    max={30}\r\n                                    marks\r\n                                    step={1}\r\n                                    getAriaValueText={(v) => `${v} Minions`}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Input\r\n                                    value={totalMinionAmount}\r\n                                    margin=\"dense\"\r\n                                    onChange={(event, newValue) => handleSliderChange(newValue, \"totalMinionAmount\")}\r\n                                    onBlur={handleBlur}\r\n                                    inputProps={{\r\n                                        step: 10,\r\n                                        min: 3,\r\n                                        max: 30,\r\n                                        type: 'number',\r\n                                        'aria-labelledby': 'input-slider',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle1\">Max Minions per Turn</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                            <Grid item xs={6}>\r\n                                <Slider\r\n                                    value={typeof maxTake === \"number\" ? maxTake : 3}\r\n                                    onChange={(event, newValue) => handleSliderChange(newValue, \"maxTake\")}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    min={1}\r\n                                    max={10}\r\n                                    marks\r\n                                    step={1}\r\n                                    getAriaValueText={(v) => `${v} Minions`}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Input\r\n                                    value={maxTake}\r\n                                    margin=\"dense\"\r\n                                    onChange={(event, newValue) => handleSliderChange(newValue, \"maxTake\")}\r\n                                    onBlur={handleBlur}\r\n                                    inputProps={{\r\n                                        step: 10,\r\n                                        min: 1,\r\n                                        max: 10,\r\n                                        type: 'number',\r\n                                        'aria-labelledby': 'input-slider',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return {\r\n            hardMode: state.settings.hardMode,\r\n            totalMinionAmount: state.settings.totalMinionAmount,\r\n            startOption: state.settings.startOption,\r\n            maxTake: state.settings.maxTake\r\n        }\r\n    }, dispatch => {\r\n        return {\r\n            setSettings: (settingName, settingValue) => dispatch(changeSettings(settingName, settingValue))\r\n        }\r\n    })(Settings)\r\n\r\n","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\Game.jsx",["85","86","87","88","89","90","91","92","93","94","95","96"],"import { faDizzy, faGrimace, faMehBlank, faMinusCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Grow, IconButton, Input, Slider, ToggleButton, ToggleButtonGroup, Typography, useTheme } from '@material-ui/core'\r\nimport React, { Component, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { init_game, playerMove, restart, startGame } from \"redux/actions\"\r\nimport GameOverScreen from './GameOverScreen'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n    const {totalMinionAmount, amount_left, amount_right, evil_position, player_turn, endTurn, game_over, player_won, start_game, gameRunning} = props\r\n    const theme = useTheme()\r\n    const [clicked, setClicked] = useState([])\r\n    const [lastSideLeft, setLastSide] = useState(true)\r\n    const maxAmount = props.maxTake\r\n    const [stillIngame, setStillInGame] = useState([])\r\n\r\n    const onMinionClick = (i, wasRemove) => {\r\n        const idx = i + 1\r\n        if(!player_turn) return;\r\n        if(idx === evil_position) return;\r\n        let list = Array.from(clicked)\r\n        if(idx < evil_position && amount_left > 0) {\r\n            if(!lastSideLeft) {\r\n                list = []\r\n                setLastSide(true)\r\n            } else if(wasRemove) {\r\n                list.pop()\r\n                setClicked(list)\r\n                return;\r\n            }\r\n            if(amount_left === list.length || list.length === maxAmount) return;\r\n\r\n            list.push(totalMinionAmount - (totalMinionAmount - evil_position) - amount_left + list.length)\r\n        } else if(idx >= evil_position && amount_right > 0){\r\n            if(lastSideLeft) {\r\n                list = []\r\n                setLastSide(false)\r\n            } else if(wasRemove) {\r\n                list.pop()\r\n                setClicked(list)\r\n                return;\r\n            }\r\n            if(amount_right === list.length || list.length === maxAmount) return;\r\n            list.push(evil_position + amount_right - list.length)\r\n        }\r\n        setClicked(list)\r\n    }\r\n\r\n    const getColor = (idx) => {\r\n        if(idx === evil_position) return theme.palette.secondary.main\r\n        return clicked.includes(idx) ? theme.palette.secondary : theme.palette.grey[\"600\"]\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(gameRunning) {\r\n            let still_ingame = Array.from(Array(totalMinionAmount).keys())\r\n            Array.from(Array(totalMinionAmount - (totalMinionAmount - evil_position) - amount_left)).map(() => still_ingame.shift())\r\n            Array.from(Array(totalMinionAmount - evil_position - amount_right)).map(() => still_ingame.pop())\r\n            setStillInGame([...still_ingame])\r\n        }\r\n        setClicked([])\r\n    }, [amount_left, amount_right])\r\n\r\n    const getIcon = (idx) => {\r\n        if(idx === evil_position) return faGrimace\r\n        // 0 1 2 3 4 5 6 7 8 9\r\n        // - 1 2 X 4 5 6 7 8 -\r\n        // 2 ? 0 1 2\r\n        if(stillIngame.includes(idx > evil_position ? idx-1 : idx)) return faMehBlank\r\n        else return faDizzy\r\n    }\r\n\r\n    const onTurnEnd = () => {\r\n        endTurn(lastSideLeft, clicked.length)\r\n    }\r\n\r\n    const getSize = () => {\r\n        if(totalMinionAmount < 10) return \"5x\"\r\n        else if(totalMinionAmount < 20) return \"4x\"\r\n        else if(totalMinionAmount < 25) return \"3x\"\r\n        else if(totalMinionAmount < 35) return \"2x\"\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container direction=\"column\" spacing={3}>\r\n            \r\n            <GameOverScreen Transition={Transition} open={game_over} onClick={() => start_game()} player_won={player_won}/>\r\n            <Grid item>\r\n                Select with left click, deselect with right click or the minus symbol\r\n            </Grid>\r\n            <Grid item container spacing={1}>\r\n                <IconButton onClick={() => onMinionClick(0, true)}>\r\n                    <FontAwesomeIcon icon={faMinusCircle}/>\r\n                </IconButton>\r\n                {Array.from(Array(totalMinionAmount).keys()).map(k => \r\n                    <Grid item xs key={`minion-${k}`} onContextMenu={(e) => {e.preventDefault(); onMinionClick(k, true)}} onClick={() => onMinionClick(k, false)}>\r\n                        <FontAwesomeIcon \r\n                            icon={getIcon(k+1)}\r\n                            color={getColor(k+1)}\r\n                            size={getSize()}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                <IconButton onClick={() => onMinionClick(totalMinionAmount-1, true)}>\r\n                    <FontAwesomeIcon icon={faMinusCircle}/>\r\n                </IconButton>\r\n                \r\n            </Grid>\r\n            {player_turn ? \r\n            [<Grid item>\r\n                <Typography variant=\"h6\">{clicked.length} / {props.maxTake}</Typography>\r\n            </Grid>,\r\n            <Grid item>\r\n                <Button color=\"secondary\" onClick={onTurnEnd} disabled={clicked.length === 0}>Confirm Action</Button>\r\n            </Grid>]\r\n            :\r\n            <Grid item>\r\n                <Loader type=\"ThreeDots\" color={theme.palette.text.primary} height={80} width={80} />\r\n            </Grid>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameWrapper = (props) => {\r\n\r\n    const {start_game, gameRunning, initGame, restartGame} = props\r\n    \r\n    useEffect(() => {\r\n        initGame()\r\n    }, [])\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container justifyContent=\"center\" alignItems=\"center\" direction=\"column\" style={{minHeight: '100vh'}} spacing={5}>\r\n                <Grid item>\r\n                    <Typography variant=\"h2\">MISSION DO NOT KILL NORBERT</Typography>\r\n                </Grid>\r\n                {gameRunning ? \r\n                <Grid item>\r\n                    <Game {...{...props, start_game: () => restartGame()}}/>\r\n                </Grid>\r\n                :\r\n                <Grid item>\r\n                    <Button color=\"secondary\" onClick={() => start_game()}>Start Game</Button>\r\n                </Grid>\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return {\r\n            gameRunning: state.game.gameRunning,\r\n            totalMinionAmount: state.settings.totalMinionAmount,\r\n            amount_left: state.game.amount_left,\r\n            amount_right: state.game.amount_right,\r\n            evil_position: state.game.evil_position,\r\n            player_turn: state.game.player_turn,\r\n            game_over: state.game.game_over,\r\n            player_won: state.game.player_won,\r\n            maxTake: state.settings.maxTake\r\n        }\r\n    }, dispatch => {\r\n        return {\r\n            start_game: () => dispatch(startGame()),\r\n            initGame: () => dispatch(init_game()),\r\n            endTurn: (fromLeft, amount) => dispatch(playerMove(fromLeft, amount)),\r\n            restartGame: () => dispatch(restart())\r\n        }\r\n    })(GameWrapper)\r\n\r\n","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\store.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\index.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\SettingsReducer.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\constants\\settingsContants.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\actions\\index.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\actions\\gameActions.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\reducer\\GamingReducer.js",["97","98","99","100"],"import { CHANGE_SETTINGS, START_OPTIONS } from \"redux/constants/settingsContants\"\r\nimport Cookies from \"js-cookie\"\r\nimport { CHANGE_TURN, GAME_OVER, INIT_GAME, START_GAME, STOP_GAME, TAKE_MINION } from \"redux/constants/gamingConstans\"\r\n\r\nlet cookie = Cookies.get(\"norbert-settings\")\r\ncookie = cookie ? cookie : \"{}\"\r\n\r\nconst initial_state = {\r\n    amount_left: -1,\r\n    amount_right: -1,\r\n    evil_position: -1,\r\n    player_turn: false,\r\n    gameRunning: false,\r\n    game_over: false,\r\n    player_won: false\r\n}\r\n\r\nconst GamingReducer = (state=initial_state, action) => {\r\n    switch(action.type) {\r\n        case TAKE_MINION: {\r\n            return {\r\n                ...state,\r\n                player_turn: !state.player_turn,\r\n                [`amount_${action.payload.side}`]: state[`amount_${action.payload.side}`] - action.payload.amount\r\n            }\r\n        }\r\n        case INIT_GAME:\r\n            return {\r\n                ...initial_state,\r\n                gameRunning: false,\r\n                ...action.payload\r\n            }\r\n        case START_GAME:\r\n            return {\r\n                ...state,\r\n                gameRunning: true,\r\n            }\r\n        case STOP_GAME:\r\n            return {\r\n                ...state,\r\n                gameRunning: false\r\n            }\r\n        case GAME_OVER: \r\n            return {\r\n                ...initial_state,\r\n                gameRunning: true,\r\n                game_over: true,\r\n                player_won: !state.player_turn\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default GamingReducer","D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\redux\\constants\\gamingConstans.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\services\\GameLogic.js",[],"D:\\Users\\Nicklas\\Documents\\Norbert\\norbert\\src\\components\\GameOverScreen.jsx",["101","102"],"import { faCrown, faHeartBroken } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, createStyles, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grow, Typography, withStyles } from \"@material-ui/core\"\r\nimport React from \"react\"\r\n\r\nconst styles = theme => createStyles({ // change to this\r\n\r\n    root: {\r\n        textAlign: 'center'\r\n    }\r\n});\r\n\r\nconst GameOverScreen = (props) => {\r\n\r\n    const {open, player_won, Transition, onClick, classes} = props \r\n\r\n    const onClicked = () => {\r\n        console.log(\"HEY\")\r\n        onClick()\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            classes={{root:classes.root, scrollPaper: classes.scrollPaper }}\r\n            open={open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onClicked}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">\r\n                GAME OVER\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <FontAwesomeIcon icon={player_won ? faCrown : faHeartBroken} size=\"5x\"/>\r\n                <Typography variant=\"h4\" style={{marginTop: '1em'}}>\r\n                    {\r\n                        player_won ?\r\n                            \"Good job! You defeated the AI\" : \"Game Over. The AI has won!\"\r\n                    }\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onClicked} color=\"secondary\">Retry</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(GameOverScreen)",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":13},{"ruleId":"107","severity":1,"message":"111","line":7,"column":44,"nodeType":"109","messageId":"110","endLine":7,"endColumn":47},{"ruleId":"107","severity":1,"message":"112","line":7,"column":49,"nodeType":"109","messageId":"110","endLine":7,"endColumn":59},{"ruleId":"107","severity":1,"message":"113","line":7,"column":61,"nodeType":"109","messageId":"110","endLine":7,"endColumn":68},{"ruleId":"107","severity":1,"message":"114","line":7,"column":85,"nodeType":"109","messageId":"110","endLine":7,"endColumn":93},{"ruleId":"107","severity":1,"message":"115","line":7,"column":95,"nodeType":"109","messageId":"110","endLine":7,"endColumn":99},{"ruleId":"107","severity":1,"message":"116","line":5,"column":56,"nodeType":"109","messageId":"110","endLine":5,"endColumn":73},{"ruleId":"107","severity":1,"message":"117","line":5,"column":94,"nodeType":"109","messageId":"110","endLine":5,"endColumn":104},{"ruleId":"107","severity":1,"message":"118","line":2,"column":17,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},{"ruleId":"107","severity":1,"message":"119","line":16,"column":11,"nodeType":"109","messageId":"110","endLine":16,"endColumn":28},{"ruleId":"107","severity":1,"message":"120","line":3,"column":29,"nodeType":"109","messageId":"110","endLine":3,"endColumn":35},{"ruleId":"107","severity":1,"message":"121","line":3,"column":37,"nodeType":"109","messageId":"110","endLine":3,"endColumn":50},{"ruleId":"107","severity":1,"message":"122","line":3,"column":52,"nodeType":"109","messageId":"110","endLine":3,"endColumn":65},{"ruleId":"107","severity":1,"message":"116","line":3,"column":67,"nodeType":"109","messageId":"110","endLine":3,"endColumn":84},{"ruleId":"107","severity":1,"message":"123","line":3,"column":86,"nodeType":"109","messageId":"110","endLine":3,"endColumn":97},{"ruleId":"107","severity":1,"message":"124","line":3,"column":123,"nodeType":"109","messageId":"110","endLine":3,"endColumn":128},{"ruleId":"107","severity":1,"message":"125","line":3,"column":130,"nodeType":"109","messageId":"110","endLine":3,"endColumn":136},{"ruleId":"107","severity":1,"message":"126","line":3,"column":138,"nodeType":"109","messageId":"110","endLine":3,"endColumn":150},{"ruleId":"107","severity":1,"message":"127","line":3,"column":152,"nodeType":"109","messageId":"110","endLine":3,"endColumn":169},{"ruleId":"107","severity":1,"message":"118","line":4,"column":17,"nodeType":"109","messageId":"110","endLine":4,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":69,"column":8,"nodeType":"130","endLine":69,"endColumn":35,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":151,"column":8,"nodeType":"130","endLine":151,"endColumn":10,"suggestions":"133"},{"ruleId":"107","severity":1,"message":"134","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"135","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":40},{"ruleId":"107","severity":1,"message":"136","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":21},{"ruleId":"107","severity":1,"message":"137","line":6,"column":19,"nodeType":"109","messageId":"110","endLine":6,"endColumn":25},{"ruleId":"107","severity":1,"message":"116","line":3,"column":70,"nodeType":"109","messageId":"110","endLine":3,"endColumn":87},{"ruleId":"107","severity":1,"message":"138","line":3,"column":102,"nodeType":"109","messageId":"110","endLine":3,"endColumn":106},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Fab' is defined but never used.","'makeStyles' is defined but never used.","'SvgIcon' is defined but never used.","'useTheme' is defined but never used.","'Zoom' is defined but never used.","'DialogContentText' is defined but never used.","'Typography' is defined but never used.","'Component' is defined but never used.","'handleInputChange' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'Input' is defined but never used.","'Slider' is defined but never used.","'ToggleButton' is defined but never used.","'ToggleButtonGroup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'evil_position', 'gameRunning', and 'totalMinionAmount'. Either include them or remove the dependency array.","ArrayExpression",["141"],"React Hook useEffect has a missing dependency: 'initGame'. Either include it or remove the dependency array.",["142"],"'CHANGE_SETTINGS' is defined but never used.","'START_OPTIONS' is defined but never used.","'CHANGE_TURN' is defined but never used.","'cookie' is assigned a value but never used.","'Grow' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [amount_left, amount_right, evil_position, gameRunning, totalMinionAmount]",{"range":"147","text":"148"},"Update the dependencies array to be: [initGame]",{"range":"149","text":"150"},[3011,3038],"[amount_left, amount_right, evil_position, gameRunning, totalMinionAmount]",[5668,5670],"[initGame]"]